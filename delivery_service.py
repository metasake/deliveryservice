"""
Модуль для определения минимального количества транспортных платформ.

Минимум определяется необходимостью перевозки всех роботов с учётом
их весов и предельной грузоподъемности платформы, а также того что на
платформу помещается не более 2-х роботов.

Модули:
    - typing: Обеспечивает поддержку аннотаций типов.
    - List: Обобщенный тип для списков.

Функции:
    - min_platforms_required(weights: List[int], limit: int) -> int:
        Определяет минимальное количество платформ, необходимых для перевозки всех роботов.
    - read_input() -> tuple[List[int], int]:
        Считывает входные данные.
    - print_result(result: int) -> None:
        Выводит результат на консоль.
"""

from typing import List


def min_platforms_required(weights: List[int], limit: int) -> int:
    """
    Определи минимальное количество транспортных платформ, необходимых для перевозки всех роботов.

    :param weights: Список весов роботов.
    :param limit: Максимальная грузоподъемность одной платформы.
    :return: Минимальное количество платформ, необходимых для перевозки всех роботов.
    """
    # Сортируем веса роботов в порядке возрастания
    weights.sort()

    # Инициализируем счетчик платформ
    platforms: int = 0

    # Инициализируем два указателя: один в начале списка, другой в конце
    i: int = 0
    j: int = len(weights) - 1

    # Пока указатели не пересеклись
    while i <= j:
        # Если текущие два робота могут быть перевезены на одной платформе
        if weights[i] + weights[j] <= limit:
            # Перемещаем оба указателя
            i += 1
            j -= 1
        else:
            # Иначе перемещаем только указатель конца списка
            j -= 1

        # Увеличиваем счетчик платформ
        platforms += 1

    return platforms


def read_input() -> tuple[List[int], int]:
    """
    Считай входные данные.

    :return weights: Список весов отдельных роботов.
    :return limit: Предельная грузоподъемность платформы.
    """
    weights: List[int] = list(map(int, input().strip().split()))
    limit: int = int(input())

    return weights, limit


def print_result(result: int) -> None:
    """
    Выведи результаты на консоль.

    :param result: Целое число, обозначающее минимальное количество платформ.
    :return: None
    """
    print(result)


if __name__ == '__main__':
    # Считывание входных данных
    weights, limit = read_input()
    # Вывод итогового результата
    print_result(min_platforms_required(weights, limit))
